#!/usr/bin/env ruby

require './xml_builder'
require './link_header'

require 'json'
require 'net/http'
require 'cgi'

class InvalidToken < StandardError; end

class Github
  def initialize
    @base_uri = "https://api.github.com"
    @cache_file = ".repositoriescache"
    @token_file = ".auth_token"
  end

  def store_token(token)
    if token && token.length > 0
      File.open(@token_file, 'w') do |f|
        f.write(token)
      end
      rebuild_user_repos_cache
    end
  end

  def search_repo(query)
    repos = load_and_cache_user_repos
    results = repos.select do |repo|
      repo['name'] =~ Regexp.new(query, 'i')
    end
    results += search_all_repos(query)
    results
  end

  def rebuild_user_repos_cache
    File.delete(@cache_file) if File.exists?(@cache_file)
    cache_all_repos_for_user
  end

  def test_authentication
    load_token
    return false if !@token || @token.length == 0
    res = get "/"
    !res.has_key?('error')
  end

  private

  def load_token
    @token = File.read(@token_file).strip if File.exists?(@token_file)
  end

  def load_and_cache_user_repos
    if File.exists?(@cache_file)
      JSON.parse(File.read(@cache_file))
    else
      cache_all_repos_for_user
    end
  end

  # TODO: probably will do a search request instead of fetching all at once
  def cache_all_repos_for_user
    raise InvalidToken unless test_authentication
    repos = []
    repos += get_user_repos
    get_user_orgs.each do |org|
      repos += get_org_repos( org['login'] )
    end
    File.open(@cache_file, 'w') do |f|
      f.write repos.to_json
    end
    repos
  end

  def get_user_repos
    res = get "/user/repos"
    if res.is_a?(Array)
      res.map do |repo|
        { 'name' => repo['full_name'], 'url' => repo['html_url'] }
      end
    else # TODO: handle error
      []
    end
  end

  def get_user_orgs
    res = get "/user/orgs"
    if res.is_a?(Array)
      res.map do |org|
        { 'login' => org['login'] }
      end
    else # TODO: handle error
      []
    end
  end

  def get_org_repos(org)
    res = get_multipage_arr "/orgs/#{org}/repos"
    if res.is_a?(Array)
      res.map do |repo|
        { 'name' => repo['full_name'], 'url' => repo['html_url'] }
      end
    else # TODO: handle error
      []
    end
  end
  
  def get_multipage_arr(path,params = {})
    qs = ''
    if params.any?
      qs = '?' + params.map {|k, v| "#{CGI.escape k}=#{CGI.escape v}"}.join("&")
    end
    resp_objects_arr = []
    uri = URI("#{@base_uri}#{path}#{qs}")
    begin
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        req = Net::HTTP::Get.new(uri)
        req['Accept'] = "application/vnd.github.v3+json"
        req['Authorization'] = "token #{@token}"
        http.request(req)
      end
      json = JSON.parse(res.body)
      if res.kind_of? Net::HTTPSuccess
        json.each {|obj| resp_objects_arr << obj}
      else
        return { 'error' => json['message'] }
      end
    end while uri = (URI(LinkHeader.parse(res['link']).find_link(["rel","next"]).href) rescue nil)
    resp_objects_arr
  end

  def search_all_repos(query)
    return [] if !query || query.length == 0
    raise InvalidToken unless test_authentication

    parts = query.split('/', 2)

    if parts.length == 1 and parts[0].length > 0
      res = get "/search/repositories", { "q" => query }
      if res.is_a?(Hash) and res.has_key?('items')
        res['items'].map do |repo|
          { 'name' => repo['full_name'], 'url' => repo['html_url'] }
        end
      else # TODO: handle error
        []
      end
    elsif parts.length == 2 and parts[0].length > 0
      user = parts[0]
      userQuery = parts[1]
      res = get "/users/#{user}/repos"
      if res.is_a?(Array)
        repos = res.select do |repo|
          repo['name'] =~ Regexp.new(userQuery, 'i')
        end
        repos.map do |repo|
          { 'name' => repo['full_name'], 'url' => repo['html_url'] }
        end
      else # TODO: handle error
        []
      end
    else
      []
    end
  end

  def get(path, params = {})
    params['per_page'] = 100  # Note: 100 is the max. - see https://developer.github.com/v3/#pagination
    qs = params.map {|k, v| "#{CGI.escape k.to_s}=#{CGI.escape v.to_s}"}.join("&")
    uri = URI("#{@base_uri}#{path}?#{qs}")

    json_all = []

    begin

      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        req = Net::HTTP::Get.new(uri)
        req['Accept'] = "application/vnd.github.v3+json"
        req['Authorization'] = "token #{@token}"
        http.request(req)
      end

      json = JSON.parse(res.body)

      if not res.kind_of? Net::HTTPSuccess
        return { 'error' => json['message'] }
      end

      if json.is_a?(Array) # result is paged
        json_all.concat json
        # See if more pages must be retrieved by testing for and extracting the link header's "next" URL.
        # See https://developer.github.com/guides/traversing-with-pagination/
        uri = URI((res['link'].match /<([^>]+)>;\s*rel="next"/)[1]) rescue nil
        break if uri.nil?
      else  # result is not an array and therefore not paged
        json_all = json
        break
      end

    end while true

    json_all
  end
end

query = ARGV[0]
github = Github.new

begin
  if query == '--update'
    github.rebuild_user_repos_cache
  elsif query == '--auth'
    github.store_token(ARGV[1])
  else
    results = github.search_repo(query || '')

    output = XmlBuilder.build do |xml|
      xml.items do
        if results.length > 0
          results.each do |repo|
            xml.item Item.new(repo['url'], repo['url'], repo['name'], repo['url'], 'yes')
          end
        else
          xml.item Item.new(nil, query, 'Update the repository cache and try again.', 'Rebuilds your local cache from GitHub, then searches again; gh-update to rebuild anytime.', 'yes', 'FE3390F7-206C-45C4-94BB-5DD14DE23A1B.png')
        end
      end
    end

    puts output
  end
rescue InvalidToken
  output = XmlBuilder.build do |xml|
    xml.items do
      xml.item Item.new('gh-error', 'gh-auth ', "Missing or invalid token!", "Please set your token with gh-auth. â†© to go there now.", 'yes')
    end
  end

  puts output
end
